type token =
  | ADD
  | EOF
  | PRINT
  | SEMICOL
  | SUB
  | MULT
  | DIV
  | LOWER
  | GREATER
  | EQUAL
  | AND
  | OR
  | NOT
  | INT of (int)
  | FLOAT of (float)

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
# 22 "parser.ml"
let yytransl_const = [|
  257 (* ADD *);
    0 (* EOF *);
  258 (* PRINT *);
  259 (* SEMICOL *);
  260 (* SUB *);
  261 (* MULT *);
  262 (* DIV *);
  263 (* LOWER *);
  264 (* GREATER *);
  265 (* EQUAL *);
  266 (* AND *);
  267 (* OR *);
  268 (* NOT *);
    0|]

let yytransl_block = [|
  269 (* INT *);
  270 (* FLOAT *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\004\000\004\000\004\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\000\000"

let yylen = "\002\000\
\002\000\002\000\000\000\001\000\003\000\003\000\003\000\003\000\
\003\000\002\000\002\000\003\000\003\000\003\000\003\000\003\000\
\002\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\020\000\000\000\000\000\000\000\000\000\
\018\000\019\000\000\000\002\000\001\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\005\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\004\000\011\000\005\000\012\000"

let yysindex = "\255\255\
\000\255\000\000\045\255\000\000\003\000\045\255\045\255\045\255\
\000\000\000\000\059\255\000\000\000\000\024\255\077\255\070\255\
\045\255\045\255\045\255\045\255\045\255\045\255\045\255\045\255\
\045\255\045\255\024\255\000\000\077\255\044\255\082\255\070\255\
\070\255\070\255\070\255\070\255"

let yyrindex = "\000\000\
\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\005\000\000\000\000\000\020\000\012\000\006\000\
\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\021\000\000\000\016\000\007\000\001\000\011\000\
\015\000\022\000\023\000\024\000"

let yygindex = "\000\000\
\000\000\019\000\000\000\246\255"

let yytablesize = 283
let yytable = "\001\000\
\009\000\003\000\013\000\003\000\004\000\017\000\008\000\028\000\
\000\000\000\000\012\000\010\000\000\000\000\000\013\000\007\000\
\000\000\000\000\000\000\011\000\006\000\014\000\015\000\016\000\
\014\000\015\000\016\000\019\000\020\000\021\000\022\000\023\000\
\024\000\025\000\026\000\027\000\000\000\029\000\030\000\031\000\
\032\000\033\000\034\000\035\000\036\000\006\000\000\000\000\000\
\007\000\021\000\022\000\023\000\024\000\025\000\026\000\000\000\
\008\000\009\000\010\000\017\000\000\000\018\000\019\000\020\000\
\021\000\022\000\023\000\024\000\025\000\026\000\017\000\000\000\
\000\000\019\000\020\000\021\000\022\000\023\000\024\000\025\000\
\026\000\020\000\021\000\022\000\023\000\024\000\025\000\026\000\
\022\000\023\000\024\000\025\000\026\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\009\000\000\000\009\000\009\000\009\000\009\000\008\000\
\017\000\008\000\008\000\008\000\010\000\012\000\010\000\010\000\
\007\000\013\000\007\000\007\000\011\000\006\000\011\000\006\000\
\014\000\015\000\016\000"

let yycheck = "\001\000\
\000\000\002\001\000\000\000\000\000\000\000\000\000\000\018\000\
\255\255\255\255\000\000\000\000\255\255\255\255\000\000\000\000\
\255\255\255\255\255\255\000\000\000\000\000\000\000\000\000\000\
\006\000\007\000\008\000\004\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\017\000\255\255\019\000\020\000\021\000\
\022\000\023\000\024\000\025\000\026\000\001\001\255\255\255\255\
\004\001\006\001\007\001\008\001\009\001\010\001\011\001\255\255\
\012\001\013\001\014\001\001\001\255\255\003\001\004\001\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\001\001\255\255\
\255\255\004\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\007\001\008\001\009\001\010\001\011\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\255\255\003\001\004\001\005\001\006\001\001\001\
\003\001\003\001\004\001\005\001\001\001\003\001\003\001\004\001\
\001\001\003\001\003\001\004\001\001\001\001\001\003\001\003\001\
\003\001\003\001\003\001"

let yynames_const = "\
  ADD\000\
  EOF\000\
  PRINT\000\
  SEMICOL\000\
  SUB\000\
  MULT\000\
  DIV\000\
  LOWER\000\
  GREATER\000\
  EQUAL\000\
  AND\000\
  OR\000\
  NOT\000\
  "

let yynames_block = "\
  INT\000\
  FLOAT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.inst) in
    Obj.repr(
# 21 "parser.mly"
                ( _1 )
# 186 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'seq) in
    Obj.repr(
# 23 "parser.mly"
                 ( Ast.Print(_2) )
# 193 "parser.ml"
               : Ast.inst))
; (fun __caml_parser_env ->
    Obj.repr(
# 25 "parser.mly"
      ([])
# 199 "parser.ml"
               : 'seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 26 "parser.mly"
           ( [_1] )
# 206 "parser.ml"
               : 'seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'seq) in
    Obj.repr(
# 27 "parser.mly"
                       ( _1::_3 )
# 214 "parser.ml"
               : 'seq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 30 "parser.mly"
                     ( Ast.Add(_1,_3) )
# 222 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 31 "parser.mly"
                     ( Ast.Sub(_1,_3) )
# 230 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 32 "parser.mly"
                      ( Ast.Mult(_1,_3) )
# 238 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 33 "parser.mly"
                     ( Ast.Div(_1,_3) )
# 246 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 34 "parser.mly"
                ( Ast.Neg(_2) )
# 253 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 35 "parser.mly"
                ( Ast.Pos(_2) )
# 260 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 36 "parser.mly"
                       ( Ast.Lower(_1,_3) )
# 268 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 37 "parser.mly"
                         ( Ast.Greater(_1,_3) )
# 276 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 38 "parser.mly"
                       ( Ast.Equal(_1,_3) )
# 284 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 39 "parser.mly"
                     ( Ast.And(_1,_3) )
# 292 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 40 "parser.mly"
                    ( Ast.Or(_1,_3) )
# 300 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Ast.expr) in
    Obj.repr(
# 41 "parser.mly"
                ( Ast.Not(_2) )
# 307 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 42 "parser.mly"
           ( Ast.Int(_1) )
# 314 "parser.ml"
               : Ast.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 43 "parser.mly"
             ( Ast.Float(_1) )
# 321 "parser.ml"
               : Ast.expr))
(* Entry prog *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let prog (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.inst)
;;
